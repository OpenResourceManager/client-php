<?php

/**
 * Created by PhpStorm.
 * User: melon
 * Date: 4/27/17
 * Time: 4:35 PM
 */

namespace OpenResourceManager\Client;

/**
 * ORM Course Client
 *
 * Communicates with an ORM API to preform course operations.
 *
 * @license MIT
 * @license https://raw.githubusercontent.com/OpenResourceManager/client-php/master/LICENSE MIT License
 * @author Alex Markessinis
 */
class Course extends Client
{
    /**
     * Base Course Route
     *
     * The base API route for the course client.
     *
     * @var string
     */
    protected $route = 'course';

    /**
     * Get Course List
     *
     * Gets a list of courses.
     *
     * @return \Unirest\Response
     */
    public function getList()
    {
        return parent::getList();
    }

    /**
     * Get Course
     *
     * Gets a course by it's ID.
     *
     * @param int $id
     * @return \Unirest\Response
     */
    public function get($id)
    {
        return parent::get($id);
    }

    /**
     * Get Course From Code
     *
     * Gets a course by it's code.
     *
     * @param string $code
     * @return \Unirest\Response
     */
    public function getFromCode($code)
    {
        return parent::getFromCode($code);
    }

    /**
     * Store Course
     *
     * Create or update a course, by it's code.
     *
     * @param string $code
     * @param string $label
     * @param int $course_level
     * @param int $department_id
     * @param string $department_code
     * @return \Unirest\Response
     */
    public function store($code, $label, $course_level, $department_id = null, $department_code = null)
    {
        $fields = [];

        //@todo validate params, throw exception when they are missing
        $fields['code'] = $code;
        $fields['label'] = $label;
        $fields['course_level'] = $course_level;
        if (!is_null($department_id)) $fields['department_id'] = $department_id;
        if (!is_null($department_code)) $fields['department_code'] = $department_code;

        return $this->_post($fields);
    }

    /**
     * Delete Course
     *
     * Delete a course by it's id.
     *
     * @param int $id
     * @return \Unirest\Response
     */
    public function delete($id)
    {
        return parent::delete($id);
    }

    /**
     * Delete Course From Code
     *
     * Deletes a course by it's code.
     *
     * @param string $code
     * @return \Unirest\Response
     */
    public function deleteFromCode($code)
    {
        return parent::deleteFromCode($code);
    }
}
